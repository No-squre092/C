#include <stdio.h>
#include <ctype.h>
#include <string.h>

// Token types
typedef enum {
    KEYWORD,
    IDENTIFIER,
    NUMBER,
    OPERATOR,
    DELIMITER,
    UNKNOWN
} TokenType;

// Keywords (can be extended)
const char *keywords[] = {"if", "else", "while", "int", "float", "return"};

// Check if a word is a keyword
int isKeyword(const char *word) {
    for (int i = 0; i < sizeof(keywords)/sizeof(keywords[0]); i++) {
        if (strcmp(word, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Tokenize the input string
void tokenize(const char *input) {
    int i = 0;
    while (input[i] != '\0') {
        // Skip whitespace
        if (isspace(input[i])) {
            i++;
            continue;
        }

        // Check for numbers (integers/floats)
        if (isdigit(input[i])) {
            printf("NUMBER: ");
            while (isdigit(input[i])) {
                printf("%c", input[i]);
                i++;
            }
            printf("\n");
            continue;
        }

        // Check for identifiers/keywords
        if (isalpha(input[i])) {
            char word[100];
            int j = 0;
            while (isalnum(input[i])) {
                word[j++] = input[i++];
            }
            word[j] = '\0';

            if (isKeyword(word)) {
                printf("KEYWORD: %s\n", word);
            } else {
                printf("IDENTIFIER: %s\n", word);
            }
            continue;
        }

        // Check for operators
        if (strchr("+-*/=", input[i])) {
            printf("OPERATOR: %c\n", input[i]);
            i++;
            continue;
        }

        // Check for delimiters
        if (strchr(";,(){}", input[i])) {
            printf("DELIMITER: %c\n", input[i]);
            i++;
            continue;
        }

        // Unknown token
        printf("UNKNOWN: %c\n", input[i]);
        i++;
    }
}

int main() {
    const char *input = "int main() { int x = 10 + 5; return x; }";
    printf("Input Code:\n%s\n\n", input);
    printf("Tokenized Output:\n");
    tokenize(input);
    return 0;
}
